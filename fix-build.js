const fs = require('fs');
const path = require('path');

console.log('üîß Correction des probl√®mes de build React...');

// V√©rifier si node_modules existe dans le frontend
const frontendNodeModulesPath = path.join(__dirname, 'frontend', 'node_modules');
if (!fs.existsSync(frontendNodeModulesPath)) {
  console.log('‚ö†Ô∏è node_modules manquant dans le frontend, installation en cours...');
  
  // Installer les d√©pendances du frontend
  const { execSync } = require('child_process');
  try {
    execSync('cd frontend && npm install --legacy-peer-deps', { stdio: 'inherit' });
    console.log('‚úÖ D√©pendances du frontend install√©es avec succ√®s');
  } catch (error) {
    console.error('‚ùå Erreur lors de l\'installation des d√©pendances du frontend:', error);
    process.exit(1);
  }
}

// R√©soudre les probl√®mes de ajv
try {
  // Cr√©er le dossier node_modules/ajv/dist/compile s'il n'existe pas
  const ajvCodegenDir = path.join(__dirname, 'frontend', 'node_modules', 'ajv', 'dist', 'compile');
  if (!fs.existsSync(ajvCodegenDir)) {
    fs.mkdirSync(ajvCodegenDir, { recursive: true });
    console.log('üìÅ R√©pertoire ajv/dist/compile cr√©√©');
  }

  // Cr√©er un fichier codegen.js vide si n√©cessaire
  const ajvCodegenFile = path.join(ajvCodegenDir, 'codegen.js');
  if (!fs.existsSync(ajvCodegenFile)) {
    fs.writeFileSync(ajvCodegenFile, 'module.exports = {};');
    console.log('üìÑ Fichier codegen.js cr√©√©');
  }

  console.log('‚úÖ Correction des probl√®mes de ajv termin√©e');
} catch (error) {
  console.error('‚ùå Erreur lors de la correction des probl√®mes de ajv:', error);
}

// Mise √† jour pour utiliser Node.js v18
console.log('üîÑ Mise √† jour des configurations pour utiliser Node.js v18...');

// Mise √† jour de .node-version si pr√©sent
const nodeVersionPath = path.join(__dirname, '.node-version');
try {
  fs.writeFileSync(nodeVersionPath, '18.19.0');
  console.log('‚úÖ Fichier .node-version mis √† jour');
} catch (error) {
  console.log('‚ö†Ô∏è Impossible de mettre √† jour .node-version:', error.message);
}

// Mise √† jour de .nvmrc si pr√©sent
const nvmrcPath = path.join(__dirname, '.nvmrc');
try {
  fs.writeFileSync(nvmrcPath, '18.19.0');
  console.log('‚úÖ Fichier .nvmrc mis √† jour');
} catch (error) {
  console.log('‚ö†Ô∏è Impossible de mettre √† jour .nvmrc:', error.message);
}

console.log('‚úÖ Script de correction termin√©');
